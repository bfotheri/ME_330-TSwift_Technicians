/*
 * File:   BaseMobility.c
 * Author: jrcannon
 *
 * Created on October 24, 2017, 10:51 AM
 */

//This code builds off of BaseMobility4 it is intended to demonstrate turret motion and sensing

#include "xc.h"

#pragma config FNOSC = LPFRC //500kHz oc = 250kHz clock
#pragma config OSCIOFNC = OFF
#pragma config SOSCSRC = DIG



volatile float DegreesTurned = 0;   
volatile double TimeActive = 0; 
volatile int Pulses = 0;

enum {GOLEFT, GORIGHT, GOCENTER} direction;

//interrupt for switches and poision ball detect
void __attribute__((interrupt, no_auto_psv)) _CNInterrupt(void)
{
  _CNIF=0;
 
  //CN interrupt for when the robot hits the corner 
  //if (state == GOING_TO_CORNER)
   // {
    //  state = GOING_TO_CENTER;
     // PR1 = num_PWM_pulses_wheel (2420); //distance to center
     // _LATB9 = 1; //move forward
     // _LATB8 = 0; //move forward
     // TMR1=0;
   // }

    LATBbits.LATB9=1; // _LATB9=0 causes the ?right? motor to go ?forward?          VERFIY THESE
    LATAbits.LATA4=0; // _LATB8= 1 causes the ?left? motor to go ?forward?
    wheel_timer_config ();
  
}


//the corner detection switches are connected to pin 13
void switches_config (void)
{
    _CN22IE = 1; //look at pin 13 to sense a change?
    _CN22PUE = 0;
    _CNIP = 6; //priority
    _CNIE = 1; //enable
    _CNIF = 0; //flag
}


void wheel_PWM_config (void)
{
    OC1CON1 = 0;  //pin 14, controls both motors PWM
    OC1CON2 = 0;
    OC1RS = 1999; //this is a PWM frequency of 125 Hz (250,000/2000)
    OC1R = 1000;
    OC1CON1bits.OCTSEL = 0b111;      
    OC1CON2bits.SYNCSEL = 0x1F;
    OC1CON2bits.OCTRIG = 0;          
    OC1CON1bits.OCM = 0b110;
    
    //Direction control, pins 12, 13
    TRISBbits.TRISB9=0; //setting pin #13, direction control for ?right? motor
    TRISAbits.TRISA4=0; //Setting pin #10, direction control for ?left? motor
    LATBbits.LATB9=0; // _LATB9=0 causes the ?right? motor to go ?forward?          VERFIY THESE
    LATAbits.LATA4=1; // _LATB8= 1 causes the ?left? motor to go ?forward?
    
    //Setting up pin 11, the wheel motor sleep pin
    _TRISB7 = 0;
    _LATB7 = 1; //motor active  
}

void IR_sensor_config (void)
{
   /*** Configure Desired Port Pins as Analog Inputs ***/
	TRISAbits.TRISA3 = 1;		//Configure pin 8 as an input
	ANSAbits.ANSA3 = 1;			// ?? Configure pin 8 as an input


	/*** Select Voltage Reference Source ***/
	// use AVdd for positive reference
	_PVCFG = 0b00;		// AVdd reference
	// use AVss for negative reference
	_NVCFG = 0;			// AD1CON2<13>


	/*** Select Analog Conversion Clock Rate ***/
	// make sure Tad is at least 600ns, see Table 29-41 datasheet
	_ADCS = 0b00011111;	// 00111111 = 32Â·TCY = TAD


	/*** Select Sample/Conversion Sequence ***/
	// use auto-convert
	_SSRC = 0b0111;		// AD1CON1<7:4>, pg. 211 datasheet
	// use auto-sample
	_ASAM = 1;			// AD1CON1<2>
	// choose a sample time >= 1 Tad, see Table 29-41 datasheet
	_SAMC = 0b00010;		// Sample time = 2 TAD

	/*** Choose Analog Channels to be Used ***/
	_CSCNA = 1;			// scan inputs
	// choose which channels to scan, e.g. for ch AN12, set _CSS12 = 1;
	_CSS14 = 1;			// Should be scanning Channel 14


	/*** Select How Results are Presented in Buffer ***/
	// set 12-bit resolution
	_MODE12 = 1;		// Why not?
	_FORM = 00;			//absolute decimal format
    
	// load results into buffer determined by converted channel, e.g. ch AN12 
    _BUFREGEN = 1;		//?? results appear in ADC1BUF14


	/*** Select Interrupt Rate ***/
	// interrupt rate should reflect number of analog channels used, e.g. if 
    // 5 channels, interrupt every 5th sample
	_SMPI = 0b00001;		// Interrupts at the completion of the conversion for every other sample

	/*** Turn on A/D Module ***/
	_ADON = 1;			// AD1CON1<15> 
}

void __attribute__((interrupt, no_auto_psv)) _T1Interrupt(void)
{
    _T1IF = 0;
    TMR1=0;
    while (ADC1BUF14 > 500) 
    {
        OC3R = 0;
        TMR1 = 0;
    }
    OC3R = 1000;
    if (direction == GOLEFT)
    {
        _LATA1 = 1;
        PR1 = num_PWM_pulses (90);
        TMR1=0;
        direction = GOCENTER;
    }
    else if (direction == GORIGHT)
    {
        _LATA1 = 0;
        PR1 = num_PWM_pulses (90);
        TMR1=0;
        
        direction = GOCENTER;
    }
    else if (direction == GOCENTER){
        PR1 = num_PWM_pulses (90);
        TMR1=0;
        if(_LATA1 == 1) {
            direction = GORIGHT;
        }
        else if (_LATA1 == 0)
        {
            direction = GOLEFT;
        }
    }
        
}

void __attribute__((interrupt, no_auto_psv)) _T3Interrupt(void)
{
    _T3IF = 0;
    TMR3=0;
    
    OC1R = 0;
    _LATB7 = 0;
     
    //TURRET CONFIGUARTIONS
    OC3CON1 = 0;                                                                                                                                                                                                                                                                                                                                                                                                               
    OC3CON2 = 0;
    OC3RS = 1999;
    OC3R = 1000;
    OC3CON1bits.OCTSEL = 0b111; 
    OC3CON2bits.SYNCSEL = 0x1F;
    OC3CON2bits.OCTRIG = 0;
    OC3CON1bits.OCM = 0b110;
    
    
    

    
    
    //setting pin 3 as the turret direction pin
    TRISAbits.TRISA1=0;
    LATAbits.LATA1=1; //1 is CCW, 0 is CW
    
    

    //configuring the turret timer
    T1CONbits.TON = 1;
    T1CONbits.TCS = 0;
    T1CONbits.TCKPS = 0b10;
    _T1IP = 4;
    _T1IE = 1;
    _T1IF = 0;
    PR1 = num_PWM_pulses (90);
   
    TMR1=0;
    
    direction = GOCENTER;
   TMR3=0;
}

//this function returns the number of PWM pulses required for the motor to turn a specified number of degrees
int num_PWM_pulses_wheel (int Degrees_Turned)
{
    TimeActive = Degrees_Turned * 1.0 / 225.0; // for full step size
    //Modify this equation with motor parameters to determine how long the motors will be on (TimeActive) in order to rotate a desired angle (DegreesTurned)
    //250000 (clock time) / 2000 (PWM frequency) = steps per second *1.8 (degrees per step if full step) = degrees per second = 225
    Pulses = TimeActive*3906.0;
    return Pulses;
}


//this function returns the number of PWM pulses required for the motor to turn a specified number of degrees
int num_PWM_pulses (int Degrees_Turned)
{
    TimeActive = Degrees_Turned * 1.0 / 225.0 * 4.0; // for quarter step size
    //Modify this equation with motor parameters to determine how long the motors will be on (TimeActive) in order to rotate a desired angle (DegreesTurned)
    //250000 (clock time) / 2000 (PWM frequency) = steps per second *1.8 (degrees per step if full step) = degrees per second = 225
    Pulses = TimeActive*3906.0;
    return Pulses;
}


//timer 3 is the wheel timer
void wheel_timer_config (void)
{
    T3CONbits.TON = 1;
    T3CONbits.TCS = 0;
    T3CONbits.TCKPS = 0b10;
    _T3IP = 4; //priority
    _T3IE = 1; //enable
    _T3IF = 0; //flag
    PR3 = num_PWM_pulses_wheel (360*2.8);
   
    TMR3=0;
}

int main(void) {
    
    switches_config ();
   
    TRISBbits.TRISB8=1;
    
    IR_sensor_config();
    wheel_PWM_config ();
    
    while (1)
    {}
    
    return 0;
}
